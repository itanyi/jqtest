/**
 * This class is generated by jOOQ
 */
package com.dator.jqtest.dao.model.tables;


import com.dator.jqtest.dao.model.Ads;
import com.dator.jqtest.dao.model.Keys;
import com.dator.jqtest.dao.model.tables.records.StatisticRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Statistic extends TableImpl<StatisticRecord> {

    private static final long serialVersionUID = 1987831;

    /**
     * The reference instance of <code>ads.Statistic</code>
     */
    public static final Statistic STATISTIC = new Statistic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatisticRecord> getRecordType() {
        return StatisticRecord.class;
    }

    /**
     * The column <code>ads.Statistic.id</code>.
     */
    public final TableField<StatisticRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ads.Statistic.timestamp</code>.
     */
    public final TableField<StatisticRecord, Timestamp> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>ads.Statistic.statisticPos</code>.
     */
    public final TableField<StatisticRecord, String> STATISTICPOS = createField("statisticPos", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ads.Statistic.bidId</code>.
     */
    public final TableField<StatisticRecord, Long> BIDID = createField("bidId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ads.Statistic.campaignId</code>.
     */
    public final TableField<StatisticRecord, Long> CAMPAIGNID = createField("campaignId", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>ads.Statistic.packageName</code>.
     */
    public final TableField<StatisticRecord, String> PACKAGENAME = createField("packageName", org.jooq.impl.SQLDataType.VARCHAR.length(128).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ads.Statistic.requestCount</code>.
     */
    public final TableField<StatisticRecord, Integer> REQUESTCOUNT = createField("requestCount", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>ads.Statistic.impressionCount</code>.
     */
    public final TableField<StatisticRecord, Integer> IMPRESSIONCOUNT = createField("impressionCount", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>ads.Statistic.downloadCount</code>.
     */
    public final TableField<StatisticRecord, Integer> DOWNLOADCOUNT = createField("downloadCount", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>ads.Statistic.income</code>.
     */
    public final TableField<StatisticRecord, BigDecimal> INCOME = createField("income", org.jooq.impl.SQLDataType.DECIMAL.precision(10, 2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * Create a <code>ads.Statistic</code> table reference
     */
    public Statistic() {
        this("Statistic", null);
    }

    /**
     * Create an aliased <code>ads.Statistic</code> table reference
     */
    public Statistic(String alias) {
        this(alias, STATISTIC);
    }

    private Statistic(String alias, Table<StatisticRecord> aliased) {
        this(alias, aliased, null);
    }

    private Statistic(String alias, Table<StatisticRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ads.ADS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StatisticRecord, Long> getIdentity() {
        return Keys.IDENTITY_STATISTIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StatisticRecord> getPrimaryKey() {
        return Keys.KEY_STATISTIC_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StatisticRecord>> getKeys() {
        return Arrays.<UniqueKey<StatisticRecord>>asList(Keys.KEY_STATISTIC_PRIMARY, Keys.KEY_STATISTIC_TIMESTAMP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Statistic as(String alias) {
        return new Statistic(alias, this);
    }

    /**
     * Rename this table
     */
    public Statistic rename(String name) {
        return new Statistic(name, null);
    }
}
